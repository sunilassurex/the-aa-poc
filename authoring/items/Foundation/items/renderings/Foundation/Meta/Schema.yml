---
ID: "73c1fac7-cabd-4c0c-b469-df447171b8a7"
Parent: "626a90bb-8bc6-4627-b9b3-0c9c39268de9"
Template: "5995f7ca-293b-4930-971c-a758f9976a26"
Path: /sitecore/layout/Renderings/Foundation/Meta/Schema
SharedFields:
- ID: "51b435bc-f7b9-478a-9c51-52916af96ff5"
  Hint: Path
  Value: /Views/ContentViewRendering.cshtml
- ID: "56776edf-261c-4abc-9fe7-70c618795239"
  Hint: __Help link
  Value: |
    <link text="Schema Component Confluence Page" linktype="external" url="https://theaacom.atlassian.net/wiki/spaces/SIT/pages/4877221933" anchor="" target="" />
Languages:
- Language: en
  Fields:
  - ID: "577f1689-7de4-4ad2-a15f-7fdc1759285f"
    Hint: __Long description
    Value: This component renders Schema Script on Page.
  - ID: "9541e67d-ce8c-4225-803d-33f7f29f09ef"
    Hint: __Short description
    Value: This component renders Schema Script on Page.
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20240509T121650Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Paul.Petersen
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "8793d12b-19bf-4247-9c0a-f6abb8fb3add"
    - ID: "acce9b46-1f19-4d3d-a0ec-ed01d807bb7d"
      Hint: RazorView
      Value: |
        @using System;
        @using System.Text.RegularExpressions;
        @using System.Web.Mvc;
        @using TheAA.Foundation.Rendering;
        @using TheAA.Foundation.Rendering.Query;
        @using TheAA.Application.ViewModels;
        @using Sitecore.Data.Items;
        @using System.Collections.Generic;
        @model ContentViewRenderingModel
        <!-- Schema rendering START -->
        
        @functions {
        	public string GetDateTime(string fieldName, string fallbackFieldName) {
        		var field = Model.GetField(fieldName);
        		if (!field.HasValueToRender()){
        		 field = Model.GetField(fallbackFieldName);
        		}
        		
        		DateTime value = Sitecore.DateUtil.IsoDateToDateTime(field.Value());
                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                var newDate = TimeZoneInfo.ConvertTime(value, TimeZoneInfo.Utc, britishZone);
        		return newDate.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'");
        	}
        	
        	public string GetLandingPageUrl(string url) {
        	
        		Uri uri = new Uri(url);
        		string pageUrl = uri.GetLeftPart(UriPartial.Authority);
        		string[] segments = GetUriSegments(uri);
        				
        		if(segments.Length >= 1)
        		{
        			pageUrl += "/" + segments[0];
        		}	
        		return pageUrl;
        	}
        	
        	public string GetLandingPageName(string url) {
        	
        		Uri uri = new Uri(url);
        		string[] segments = GetUriSegments(uri);
        		if(segments.Length >= 1)
        		{
        			var pageName = segments[0].Replace("-"," ");
        			return Regex.Replace(pageName, @"\b\w", match => match.Value.ToUpper());
        		}
        		
        		return string.Empty;
        	}
        	
        	public string[] GetUriSegments(Uri uri) {
        	
        		if(uri.AbsolutePath != "/"){
        			return uri.AbsolutePath.Trim('/').Split('/');
        		}
        		return new string[0];
        	}
        
        }
        
        @{
            var canonical = Model.GetCanonicalUrl().ToString();
            var MetaDescription = Model.GetField("MetaDescription");
        	var uri = new Uri(canonical);
        	var domainUrl = string.Format("{0}://{1}", uri.Scheme, uri.Host);
        
            var allRenderings = Model.GetAllRenderingOfAnItem();
            var TitleComponents = new List<Item>();
            var RelatedLinks = new HashSet<string>();
            foreach (var r in allRenderings){
             var dsItem = Model.Rendering.Item.Database.GetItem(r.DataSource);
             if (dsItem != null && dsItem.TemplateName == "TitleComponent"){
                TitleComponents.Add(dsItem);
             }
             if (dsItem != null && dsItem.TemplateName == "RelatedLinkSource"){
        		foreach (var ri in Model.GetField("FirstColumnLinks",dsItem).SelectedItems()){
        			var linkUrl = Model.GetField("Link",ri).LinkUrl;
        			if(!linkUrl.StartsWith("https://")){
        				linkUrl = domainUrl + Model.GetField("Link",ri).LinkUrl;
        			}
        			if(linkUrl.ToString() != canonical){
        				RelatedLinks.Add("\"" + linkUrl + "\"");
        			}
        		}
              }
            }
        	
        	var pageTitle = Model.Rendering.Item.Name;
        	if(TitleComponents.Count() > 0)
        	{
        		pageTitle = Model.GetField("H1TitleText", TitleComponents.FirstOrDefault()).Value();
        	}
        
        string dateModified = GetDateTime("CustomUpdatedDate", "__updated");
        string datePublished = GetDateTime("CustomCreatedDate", "__created");
        string landingPageUrl = GetLandingPageUrl(canonical);
        string landingPageName = GetLandingPageName(canonical);
        
        <script type="application/ld+json">
        {
          "@@context": "https://schema.org",
          "@@graph": [
            {
              "@@type": "Organization",
              "@@id": "@domainUrl/#organization",
              "legalName": "Automobile Association Developments Limited",
              "url": "@domainUrl/",
              "sameAs": [
                "https://www.linkedin.com/company/the-aa/",
                "https://uk.trustpilot.com/review/www.theaa.com",
                "https://twitter.com/TheAA_uk",
                "https://twitter.com/TheAA_Patrol",
                "https://www.youtube.com/user/theAAPatrol",
                "https://www.facebook.com/TheAAUK",
                "https://www.instagram.com/theaa_uk/"
              ]
            },
            {
              "@@type": "WebSite",
              "@@id": "@domainUrl/#website",
              "url": "@domainUrl/",
              "name": "The AA",
              "publisher": {
                "@@id": "@domainUrl/#organization"
              }
            },
            {
              "@@type": "WebPage",
              "@@id": "@canonical#webpage",
              "url": "@canonical",
              "inLanguage": "en-GB",
              "name": "@pageTitle",
              "significantLink": [
                "@landingPageUrl"
              ],
              "relatedLink": [@Raw(string.Join(",\r\n", RelatedLinks))],
              "primaryImageOfPage": {
                "@@id": "@canonical/#primaryimage"
              },
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "description": "@Model.GetField("MetaDescription").Value()"
            },
            {
              "@@type": "Article",
              "@@id": "@canonical/#article",
              "isPartOf": {
                "@@id": "@canonical/#webpage"
              },
              "author": {
                "@@id": "@landingPageUrl"
              },
              "headline": "@pageTitle",
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "mainEntityOfPage": {
                "@@id": "@canonical/#webpage"
              },
              "publisher": {
                "@@id": "@landingPageUrl"
              },
              "image": {
                "@@id": "@canonical/#primaryimage"
              },
              "articleSection": "@landingPageName"
            },
            {
              "@@type": [
                "Organization"
              ],
              "@@id": "@domainUrl/breakdown-cover/#organization",
              "name": "The AA",
              "image": {
                "@@type": "ImageObject",
                "@@id": "@domainUrl/breakdown-cover/#authorlogo",
                "url": "https://media.licdn.com/dms/image/C4E0BAQE7H01iBKDMqA/company-logo_400_400/0?e=1575504000&amp;v=beta&amp;t=Smb1oL_uaBTS386Pi2py4y6qONAvdE_RW__hC56sx3g",
                "caption": "The AA"
              },
              "description": "We're proud of the quality of our service but don't just take our word for it. We've been awarded 5 stars by independent research company Defaqto, and more than 95% of our breakdown cover reviews recommend us.",
              "sameAs": [
                "https://www.linkedin.com/company/the-aa/"
              ]
            }
          ]
        }
        </script>
        
        }
        <!-- Schema rendering END -->
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\unicorn
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250703T014959Z
  - Version: 2
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20240927T111741Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "4b98f5bd-6137-43bc-9527-78fd2d09a4e8"
    - ID: "acce9b46-1f19-4d3d-a0ec-ed01d807bb7d"
      Hint: RazorView
      Value: |
        @using System;
        @using System.Text.RegularExpressions;
        @using System.Web.Mvc;
        @using TheAA.Foundation.Rendering;
        @using TheAA.Foundation.Rendering.Query;
        @using TheAA.Application.ViewModels;
        @using Sitecore.Data.Items;
        @using System.Collections.Generic;
        @model ContentViewRenderingModel
        <!-- Schema rendering START -->
        
        @functions {
            public string GetDateTime(string fieldName, string fallbackFieldName)
            {
                var field = Model.GetField(fieldName);
                if (!field.HasValueToRender())
                {
                    field = Model.GetField(fallbackFieldName);
                }
        
                DateTime value = Sitecore.DateUtil.IsoDateToDateTime(field.Value());
                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                var newDate = TimeZoneInfo.ConvertTime(value, TimeZoneInfo.Utc, britishZone);
                return newDate.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'");
            }
        
            public string GetLandingPageUrl(string url)
            {
        
                Uri uri = new Uri(url);
                string pageUrl = uri.GetLeftPart(UriPartial.Authority);
                string[] segments = GetUriSegments(uri);
        
                if (segments.Length >= 1)
                {
                    pageUrl += "/" + segments[0];
                }
                return pageUrl;
            }
        
            public string GetLandingPageName(string url)
            {
        
                Uri uri = new Uri(url);
                string[] segments = GetUriSegments(uri);
                if (segments.Length >= 1)
                {
                    var pageName = segments[0].Replace("-", " ");
                    return Regex.Replace(pageName, @"\b\w", match => match.Value.ToUpper());
                }
        
                return string.Empty;
            }
        
            public string[] GetUriSegments(Uri uri)
            {
        
                if (uri.AbsolutePath != "/")
                {
                    return uri.AbsolutePath.Trim('/').Split('/');
                }
                return new string[0];
            }
        
        }
        
        @{
            var canonical = Model.GetCanonicalUrl().ToString();
            var MetaDescription = Model.GetField("MetaDescription");
            var uri = new Uri(canonical);
            var domainUrl = string.Format("{0}://{1}", uri.Scheme, uri.Host);
        
            var allRenderings = Model.GetAllRenderingOfAnItem();
            var TitleComponents = new List<Item>();
            var RelatedLinks = new HashSet<string>();
        
            var pageTitle = string.Empty;
            var titleField = Model.GetField("H1TitleText");
            if (titleField.HasValueToRender())
            {
                pageTitle = Model.GetField("H1TitleText").Value();
            }
        
            var relatedPagesField = Model.GetField("Related Pages");
            foreach (var page in relatedPagesField.SelectedItems())
            {
                var pageUrl = Model.GetItemUrl(page);
                if (!string.IsNullOrWhiteSpace(pageUrl) && pageUrl != canonical)
                {
                    RelatedLinks.Add("\"" + domainUrl + pageUrl + "\"");
                }
            }
        
            foreach (var r in allRenderings)
            {
                var dsItem = Model.Rendering.Item.Database.GetItem(r.DataSource);
                if (dsItem != null && dsItem.TemplateName == "TitleComponent")
                {
                    pageTitle = Model.GetField("H1TitleText", dsItem).Value();
                }
        
                if (RelatedLinks.Count() == 0 && dsItem != null && dsItem.TemplateName == "RelatedLinkSource")
                {
                    foreach (var ri in Model.GetField("FirstColumnLinks", dsItem).SelectedItems())
                    {
                        var linkUrl = Model.GetField("Link", ri).LinkUrl;
                        if (!linkUrl.StartsWith("https://"))
                        {
                            linkUrl = domainUrl + Model.GetField("Link", ri).LinkUrl;
                        }
                        if (linkUrl.ToString() != canonical)
                        {
                            RelatedLinks.Add("\"" + linkUrl + "\"");
                        }
                    }
                }
            }
        
            if (string.IsNullOrWhiteSpace(pageTitle))
            {
                pageTitle = Model.Rendering.Item.Name;
            }
        
            var authorName = "The AA";
            var authorUrl = domainUrl;
            var authorItem = Model.GetField("AuthoredBy").GetTarget();
            if (authorItem != null)
            {
                var authorNameField = Model.GetField("FullName", authorItem);
                if (authorNameField.HasValueToRender())
                {
                    authorName = authorNameField.Value();
                }
                var authUrl = Model.GetItemUrl(authorItem);
                if (!string.IsNullOrWhiteSpace(authUrl) && !authUrl.ToLower().StartsWith("/modules"))
                {
                    authorUrl += authUrl;
                }
            }
        
            string dateModified = GetDateTime("CustomUpdatedDate", "__updated");
            string datePublished = GetDateTime("CustomCreatedDate", "__created");
            string landingPageUrl = GetLandingPageUrl(canonical);
            string landingPageName = GetLandingPageName(canonical);
        
        <script type="application/ld+json">
        {
          "@@context": "https://schema.org",
          "@@graph": [
            {
              "@@type": "Organization",
              "@@id": "@domainUrl/#organization",
              "legalName": "Automobile Association Developments Limited",
              "url": "@domainUrl/",
              "sameAs": [
                "https://www.linkedin.com/company/the-aa/",
                "https://uk.trustpilot.com/review/www.theaa.com",
                "https://twitter.com/TheAA_uk",
                "https://twitter.com/TheAA_Patrol",
                "https://www.youtube.com/user/theAAPatrol",
                "https://www.facebook.com/TheAAUK",
                "https://www.instagram.com/theaa_uk/"
              ]
            },
            {
              "@@type": "WebSite",
              "@@id": "@domainUrl/#website",
              "url": "@domainUrl/",
              "name": "The AA",
              "publisher": {
                "@@id": "@domainUrl/#organization"
              }
            },
            {
              "@@type": "WebPage",
              "@@id": "@canonical#webpage",
              "url": "@canonical",
              "inLanguage": "en-GB",
              "name": "@pageTitle",
              "significantLink": [
                "@landingPageUrl"
              ],
              "relatedLink": [@Raw(string.Join(",\r\n", RelatedLinks))],
              "primaryImageOfPage": {
                "@@id": "@canonical/#primaryimage"
              },
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "description": "@Model.GetField("MetaDescription").Value()"
            },
            {
              "@@type": "Article",
              "@@id": "@canonical/#article",
              "isPartOf": {
                "@@id": "@canonical/#webpage"
              },
              "author": {
                "@@type": "Person",
        		"name": "@authorName",
        		"url": "@authorUrl"
              },
              "headline": "@pageTitle",
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "mainEntityOfPage": {
                "@@id": "@canonical/#webpage"
              },
              "publisher": {
                "@@id": "@landingPageUrl"
              },
              "image": {
                "@@id": "@canonical/#primaryimage"
              },
              "articleSection": "@landingPageName"
            },
            {
              "@@type": [
                "Organization"
              ],
              "@@id": "@domainUrl/breakdown-cover/#organization",
              "name": "The AA",
              "image": {
                "@@type": "ImageObject",
                "@@id": "@domainUrl/breakdown-cover/#authorlogo",
                "url": "https://media.licdn.com/dms/image/C4E0BAQE7H01iBKDMqA/company-logo_400_400/0?e=1575504000&amp;v=beta&amp;t=Smb1oL_uaBTS386Pi2py4y6qONAvdE_RW__hC56sx3g",
                "caption": "The AA"
              },
              "description": "We're proud of the quality of our service but don't just take our word for it. We've been awarded 5 stars by independent research company Defaqto, and more than 95% of our breakdown cover reviews recommend us.",
              "sameAs": [
                "https://www.linkedin.com/company/the-aa/"
              ]
            }
          ]
        }
        </script>
        
        }
        <!-- Schema rendering END -->
    - ID: "c8f93afe-bfd4-4e8f-9c61-152559854661"
      Hint: __Valid from
      Value: 20240927T111741Z
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250703T014959Z
  - Version: 3
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20250506T111714Z
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "6b5f2b62-efe3-4f61-8b41-da014e78f251"
    - ID: "acce9b46-1f19-4d3d-a0ec-ed01d807bb7d"
      Hint: RazorView
      Value: |
        @using System;
        @using System.Text.RegularExpressions;
        @using System.Web.Mvc;
        @using TheAA.Foundation.Rendering;
        @using TheAA.Foundation.Rendering.Query;
        @using TheAA.Application.ViewModels;
        @using Sitecore.Data.Items;
        @using System.Collections.Generic;
        @model ContentViewRenderingModel
        <!-- Schema rendering START -->
        
        @functions {
            public string GetDateTime(string fieldName, string fallbackFieldName)
            {
                var field = Model.GetField(fieldName);
                if (!field.HasValueToRender())
                {
                    field = Model.GetField(fallbackFieldName);
                }
        
                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                var newDate = TimeZoneInfo.ConvertTime(field.RenderDateTimeValue(), TimeZoneInfo.Utc, britishZone);
                return newDate.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'");
            }
        
            public string GetLandingPageUrl(string url)
            {
        
                Uri uri = new Uri(url);
                string pageUrl = uri.GetLeftPart(UriPartial.Authority);
                string[] segments = GetUriSegments(uri);
        
                if (segments.Length >= 1)
                {
                    pageUrl += "/" + segments[0];
                }
                return pageUrl;
            }
        
            public string GetLandingPageName(string url)
            {
        
                Uri uri = new Uri(url);
                string[] segments = GetUriSegments(uri);
                if (segments.Length >= 1)
                {
                    var pageName = segments[0].Replace("-", " ");
                    return Regex.Replace(pageName, @"\b\w", match => match.Value.ToUpper());
                }
        
                return string.Empty;
            }
        
            public string[] GetUriSegments(Uri uri)
            {
        
                if (uri.AbsolutePath != "/")
                {
                    return uri.AbsolutePath.Trim('/').Split('/');
                }
                return new string[0];
            }
        
        }
        
        @{
            var canonical = Model.GetCanonicalUrl().ToString();
            var MetaDescription = Model.GetField("MetaDescription");
            var uri = new Uri(canonical);
            var domainUrl = string.Format("{0}://{1}", uri.Scheme, uri.Host);
        
            var allRenderings = Model.GetAllRenderingOfAnItem();
            var TitleComponents = new List<Item>();
            var RelatedLinks = new HashSet<string>();
        
            var pageTitle = string.Empty;
            var titleField = Model.GetField("H1TitleText");
            if (titleField.HasValueToRender())
            {
                pageTitle = Model.GetField("H1TitleText").Value();
            }
        
            var relatedPagesField = Model.GetField("Related Pages");
            foreach (var page in relatedPagesField.SelectedItems())
            {
                var pageUrl = Model.GetItemUrl(page);
                if (!string.IsNullOrWhiteSpace(pageUrl) && pageUrl != canonical)
                {
                    RelatedLinks.Add("\"" + domainUrl + pageUrl + "\"");
                }
            }
        
            foreach (var r in allRenderings)
            {
                var dsItem = Model.Rendering.Item.Database.GetItem(r.DataSource);
                if (dsItem != null && dsItem.TemplateName == "TitleComponent")
                {
                    pageTitle = Model.GetField("H1TitleText", dsItem).Value();
                }
        
                if (RelatedLinks.Count() == 0 && dsItem != null && dsItem.TemplateName == "RelatedLinkSource")
                {
                    foreach (var ri in Model.GetField("FirstColumnLinks", dsItem).SelectedItems())
                    {
                        var linkUrl = Model.GetField("Link", ri).LinkUrl;
                        if (!linkUrl.StartsWith("https://"))
                        {
                            linkUrl = domainUrl + Model.GetField("Link", ri).LinkUrl;
                        }
                        if (linkUrl.ToString() != canonical)
                        {
                            RelatedLinks.Add("\"" + linkUrl + "\"");
                        }
                    }
                }
            }
        
            if (string.IsNullOrWhiteSpace(pageTitle))
            {
                pageTitle = Model.Rendering.Item.Name;
            }
        
            var authorName = "The AA";
            var authorUrl = domainUrl;
            var authorItem = Model.GetField("AuthoredBy").GetTarget();
            if (authorItem != null)
            {
                var authorNameField = Model.GetField("FullName", authorItem);
                if (authorNameField.HasValueToRender())
                {
                    authorName = authorNameField.Value();
                }
                var authUrl = Model.GetItemUrl(authorItem);
                if (!string.IsNullOrWhiteSpace(authUrl) && !authUrl.ToLower().StartsWith("/modules"))
                {
                    authorUrl += authUrl;
                }
            }
        
            string dateModified = GetDateTime("CustomUpdatedDate", "__updated");
            string datePublished = GetDateTime("CustomCreatedDate", "__created");
            string landingPageUrl = GetLandingPageUrl(canonical);
            string landingPageName = GetLandingPageName(canonical);
        
            <script type="application/ld+json">
        {
          "@@context": "https://schema.org",
          "@@graph": [
            {
              "@@type": "Organization",
              "@@id": "@domainUrl/#organization",
              "legalName": "Automobile Association Developments Limited",
              "url": "@domainUrl/",
              "sameAs": [
                "https://www.linkedin.com/company/the-aa/",
                "https://uk.trustpilot.com/review/www.theaa.com",
                "https://twitter.com/TheAA_uk",
                "https://twitter.com/TheAA_Patrol",
                "https://www.youtube.com/user/theAAPatrol",
                "https://www.facebook.com/TheAAUK",
                "https://www.instagram.com/theaa_uk/"
              ]
            },
            {
              "@@type": "WebSite",
              "@@id": "@domainUrl/#website",
              "url": "@domainUrl/",
              "name": "The AA",
              "publisher": {
                "@@id": "@domainUrl/#organization"
              }
            },
            {
              "@@type": "WebPage",
              "@@id": "@canonical#webpage",
              "url": "@canonical",
              "inLanguage": "en-GB",
              "name": "@pageTitle",
              "significantLink": [
                "@landingPageUrl"
              ],
              "relatedLink": [@Raw(string.Join(",\r\n", RelatedLinks))],
              "primaryImageOfPage": {
                "@@id": "@canonical/#primaryimage"
              },
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "description": "@Model.GetField("MetaDescription").Value()"
            },
            {
              "@@type": "Article",
              "@@id": "@canonical/#article",
              "isPartOf": {
                "@@id": "@canonical/#webpage"
              },
              "author": {
                "@@type": "Person",
        		"name": "@authorName",
        		"url": "@authorUrl"
              },
              "headline": "@pageTitle",
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "mainEntityOfPage": {
                "@@id": "@canonical/#webpage"
              },
              "publisher": {
                "@@id": "@landingPageUrl"
              },
              "image": {
                "@@id": "@canonical/#primaryimage"
              },
              "articleSection": "@landingPageName"
            },
            {
              "@@type": [
                "Organization"
              ],
              "@@id": "@domainUrl/breakdown-cover/#organization",
              "name": "The AA",
              "image": {
                "@@type": "ImageObject",
                "@@id": "@domainUrl/breakdown-cover/#authorlogo",
                "url": "https://media.licdn.com/dms/image/C4E0BAQE7H01iBKDMqA/company-logo_400_400/0?e=1575504000&amp;v=beta&amp;t=Smb1oL_uaBTS386Pi2py4y6qONAvdE_RW__hC56sx3g",
                "caption": "The AA"
              },
              "description": "We're proud of the quality of our service but don't just take our word for it. We've been awarded 5 stars by independent research company Defaqto, and more than 95% of our breakdown cover reviews recommend us.",
              "sameAs": [
                "https://www.linkedin.com/company/the-aa/"
              ]
            }
          ]
        }
            </script>
        
        }
        <!-- Schema rendering END -->
    - ID: "c8f93afe-bfd4-4e8f-9c61-152559854661"
      Hint: __Valid from
      Value: 20250506T111714Z
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250703T014959Z
  - Version: 4
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20250620T050004Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "7629c5f4-020a-4ec8-ab06-33a4b30f8150"
    - ID: "acce9b46-1f19-4d3d-a0ec-ed01d807bb7d"
      Hint: RazorView
      Value: |
        @using System;
        @using System.Text.RegularExpressions;
        @using System.Web.Mvc;
        @using TheAA.Foundation.Rendering;
        @using TheAA.Foundation.Rendering.Query;
        @using TheAA.Application.ViewModels;
        @using Sitecore.Data.Items;
        @using System.Collections.Generic;
        @model ContentViewRenderingModel
        <!-- Schema rendering START -->
        
        @functions {
            public string GetDateTime(string fieldName, string fallbackFieldName)
            {
                var field = Model.GetField(fieldName);
                if (!field.HasValueToRender())
                {
                    field = Model.GetField(fallbackFieldName);
                }
        
                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                var newDate = TimeZoneInfo.ConvertTime(field.RenderDateTimeValue(), TimeZoneInfo.Utc, britishZone);
                return newDate.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'Z'");
            }
        
            public string GetLandingPageName(string url)
            {
        
                Uri uri = new Uri(url);
                string[] segments = GetUriSegments(uri);
                if (segments.Length >= 1)
                {
                    var pageName = segments[0].Replace("-", " ");
                    return Regex.Replace(pageName, @"\b\w", match => match.Value.ToUpper());
                }
        
                return string.Empty;
            }
        
            public string[] GetUriSegments(Uri uri)
            {
        
                if (uri.AbsolutePath != "/")
                {
                    return uri.AbsolutePath.Trim('/').Split('/');
                }
                return new string[0];
            }
        
        }
        
        @{
            var canonical = Model.GetCanonicalUrl().ToString();
            var MetaDescription = Model.GetField("MetaDescription");
            var uri = new Uri(canonical);
            var domainUrl = string.Format("{0}://{1}", uri.Scheme, uri.Host);
        
            var allRenderings = Model.GetAllRenderingOfAnItem();
            var TitleComponents = new List<Item>();
            var RelatedLinks = new HashSet<string>();
        
            var pageTitle = string.Empty;
            var titleField = Model.GetField("H1TitleText");
            if (titleField.HasValueToRender())
            {
                pageTitle = Model.GetField("H1TitleText").Value();
            }
        
            var relatedPagesField = Model.GetField("Related Pages");
            foreach (var page in relatedPagesField.SelectedItems())
            {
                var pageUrl = Model.GetItemUrl(page);
                if (!string.IsNullOrWhiteSpace(pageUrl) && pageUrl != canonical)
                {
                    RelatedLinks.Add("\"" + domainUrl + pageUrl + "\"");
                }
            }
        
            foreach (var r in allRenderings)
            {
                var dsItem = Model.Rendering.Item.Database.GetItem(r.DataSource);
                if (dsItem != null && dsItem.TemplateName == "TitleComponent")
                {
                    pageTitle = Model.GetField("H1TitleText", dsItem).Value();
                }
        
                if (RelatedLinks.Count() == 0 && dsItem != null && dsItem.TemplateName == "RelatedLinkSource")
                {
                    foreach (var ri in Model.GetField("FirstColumnLinks", dsItem).SelectedItems())
                    {
                        var linkUrl = Model.GetField("Link", ri).LinkUrl;
                        if (!linkUrl.StartsWith("https://"))
                        {
                            linkUrl = domainUrl + Model.GetField("Link", ri).LinkUrl;
                        }
                        if (linkUrl.ToString() != canonical)
                        {
                            RelatedLinks.Add("\"" + linkUrl + "\"");
                        }
                    }
                }
            }
        
            if (string.IsNullOrWhiteSpace(pageTitle))
            {
                pageTitle = Model.Rendering.Item.Name;
            }
        
            var authorName = "The AA";
            var authorUrl = domainUrl;
            var authorItem = Model.GetField("AuthoredBy").GetTarget();
            if (authorItem != null)
            {
                var authorNameField = Model.GetField("FullName", authorItem);
                if (authorNameField.HasValueToRender())
                {
                    authorName = authorNameField.Value();
                }
                var authUrl = Model.GetItemUrl(authorItem);
                if (!string.IsNullOrWhiteSpace(authUrl) && !authUrl.ToLower().StartsWith("/modules"))
                {
                    authorUrl += authUrl;
                }
            }
        
            //Fetch canonical URL of leading parent item
            /*
                eg for page: https://theaa.com/p1/p2/p3
                   value will be https://theaa.com/p1
            */
            var pageItem = Model.Rendering.Item;
            var leadingParent = pageItem;
            while (pageItem != null)
            {
                if (pageItem.Name.ToLower() == "home")
                {
                    pageItem = null;
                }
                else
                {
                    leadingParent = pageItem;
                    pageItem = pageItem.Parent;
                }
            }
        
            string dateModified = GetDateTime("CustomUpdatedDate", "__updated");
            string datePublished = GetDateTime("CustomCreatedDate", "__created");
            string landingPageUrl = Model.GetCanonicalUrl(leadingParent).ToString();
            string landingPageName = GetLandingPageName(canonical);
        
            <script type="application/ld+json">
        {
          "@@context": "https://schema.org",
          "@@graph": [
            {
              "@@type": "WebPage",
              "@@id": "@canonical#webpage",
              "url": "@canonical",
              "inLanguage": "en-GB",
              "name": "@pageTitle",
              "significantLink": [
                "@landingPageUrl"
              ],
              "relatedLink": [@Raw(string.Join(",\r\n", RelatedLinks))],
              "primaryImageOfPage": {
                "@@id": "@canonical/#primaryimage"
              },
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "description": "@Model.GetField("MetaDescription").Value()"
            },
            {
              "@@type": "Article",
              "@@id": "@canonical/#article",
              "isPartOf": {
                "@@id": "@canonical/#webpage"
              },
              "author": {
                "@@type": "Person",
        		"name": "@authorName",
        		"url": "@authorUrl"
              },
              "headline": "@pageTitle",
              "datePublished": "@datePublished",
              "dateModified": "@dateModified",
              "mainEntityOfPage": {
                "@@id": "@canonical/#webpage"
              },
              "publisher": {
                "@@id": "@landingPageUrl"
              },
              "image": {
                "@@id": "@canonical/#primaryimage"
              },
              "articleSection": "@landingPageName"
            }
          ]
        }
            </script>
        
        }
        <!-- Schema rendering END -->
    - ID: "c8f93afe-bfd4-4e8f-9c61-152559854661"
      Hint: __Valid from
      Value: 20250620T050004Z
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250703T014959Z
