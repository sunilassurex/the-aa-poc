---
ID: "18f51ff4-263d-46a0-b153-ee1d867ac0fe"
Parent: "ad31cd89-3849-4f83-8125-b9e194580de4"
Template: "5995f7ca-293b-4930-971c-a758f9976a26"
Path: /sitecore/layout/Renderings/Feature/AA/Basic Content/Page Header
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: Software/32x32/element_add.png
- ID: "51b435bc-f7b9-478a-9c51-52916af96ff5"
  Hint: Path
  Value: /Views/ContentViewRendering.cshtml
- ID: "56776edf-261c-4abc-9fe7-70c618795239"
  Hint: __Help link
  Value: |
    <link linktype="external" url="https://theaacom.atlassian.net/wiki/x/FwAJKAE" anchor="" target="" />
- ID: "7d24e54f-5c16-4314-90c9-6051aa1a7da1"
  Hint: Parameters Template
  Value: "{E31C7948-5FB2-4F19-A0D9-E8F5EBB8A365}"
Languages:
- Language: en
  Fields:
  - ID: "577f1689-7de4-4ad2-a15f-7fdc1759285f"
    Hint: __Long description
    Value: This component renders Page Header on Page.
  - ID: "9541e67d-ce8c-4225-803d-33f7f29f09ef"
    Hint: __Short description
    Value: This component renders Page Header on Page.
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20250327T130731Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Paul.Petersen
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "283df0d3-51ee-46c3-9d81-7763e1833130"
    - ID: "9e6a6532-99aa-4a0e-aba3-e7259e5429ba"
      Hint: StyleSheets
      Value: |
        .ph-section {
          color: var(--color-mono-darkest);
        }
        
        .ph-bg-image {
          color: var(--color-white);
        }
        .ph-bg-image a {
          color: var(--color-white);
        }
        
        .ph-bg-dark {
          background-color: var(--color-mono-darkest);
          color: var(--color-white);
        }
        .ph-bg-dark a {
          color: var(--color-white);
        }
        
        .ph-section .container {
          display: flex;
          padding: var(--space-none) var(--space-large);
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-x-large);
          align-self: stretch;
        }
        
        .ph-content {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-large);
          align-self: stretch;
        }
        
        .ph-authorship {
          display: flex;
          align-items: center;
          align-content: center;
          gap: var(--space-large) var(--space-x-large);
          align-self: stretch;
          flex-wrap: wrap;
        }
        
        .ph-authors {
          display: flex;
          flex-direction: row;
          align-items: flex-start;
          gap: var(--space-x-large);
        }
        
        .ph-author {
          display: flex;
          align-items: center;
          gap: var(--space-medium);
        }
        
        .ph-author-column {
          display: flex;
          flex-direction: column;
          gap: var(--space-medium);
        }
        
        .ph-author-image {
          border-radius: 50%;
          height: 48px;
          width: 48px;
        }
        
        .ph-copymsg {
          text-align: center;
          display: none;
          position: fixed;
          top: var(--space-x-large);
          left: 50%;
          transform: translateX(-50%);
          background-color: var(--color-white);
          color: var(--color-black);
          padding: var(--space-medium);
          border-radius: 5px;
          z-index: 9999;
        }
        
        .ph-copymsg.show {
          display: block;
        }
        
        /***************************************/
        /********** Media Queries **************/
        /***************************************/
        @media (max-width: 480px) {
          section.ph-section {
            padding-top: var(--space-large) !important;
            padding-bottom: var(--space-large) !important;
          }
          .ph-content h1 {
            text-align: left;
          }
          .ph-container {
            padding: var(--space-large);
          }
          .ph-authorship {
            flex-direction: column;
            align-items: flex-start;
            align-self: flex-start;
          }
          .ph-authors {
            flex-direction: column;
          }
        }
    - ID: "acce9b46-1f19-4d3d-a0ec-ed01d807bb7d"
      Hint: RazorView
      Value: |
        @using TheAA.Foundation.Rendering;
        @using TheAA.Application.ViewModels;
        @using Sitecore.Data.Items;
        @inherits  HtmlTemplateBase<ContentViewRenderingModel>
        
        @functions {
            public string GetFormatedDate(string fieldName, string fallbackFieldName)
            {
                var field = Model.GetField(fieldName);
                if (!field.HasValueToRender())
                {
                    field = Model.GetField(fallbackFieldName);
                }
        
                DateTime value = Sitecore.DateUtil.IsoDateToDateTime(field.Value());
                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                var newDate = TimeZoneInfo.ConvertTime(value, TimeZoneInfo.Utc, britishZone);
                return newDate.ToString("dd MMMM yyyy");
            }
        }
        
        @{
        
            var h1TextField = Model.GetField("H1TitleText");
        	if (!h1TextField.HasValueToRender())
        	{
        		<!-- H1 is Empty -->
        		return;
        	}
        	
            var heroTextField = Model.GetField("HeroTitleText");
            var h3TextField = Model.GetField("H3Text");
            var timeToReadField = Model.GetField("TimeToRead");
            var bgImageField = Model.GetField("BackgroundImage");
            var imgOpctyField = Model.GetField("ImageOpacityPercentage");
            var customUpdatedDateField = Model.GetField("CustomUpdatedDate");
            var authoredByField = Model.GetField("AuthoredBy");
            var reviewedByField = Model.GetField("ReviewedBy");
            Item authoredByItem = null;
            if (authoredByField.HasValueToRender())
            {
                authoredByItem = authoredByField.GetTarget();
            }
            Item reviewedByItem = null;
            if (reviewedByField.HasValueToRender())
            {
                reviewedByItem = reviewedByField.GetTarget();
            }
        
            var updatedDate = GetFormatedDate("CustomUpdatedDate", "__updated");
        
        
            var backgroundImageUrl = string.Empty;
            decimal imageOpacity = 75;
            if (bgImageField.HasValueToRender())
            {
                backgroundImageUrl = bgImageField.MediaURL;
        
                if (imgOpctyField.HasValueToRender())
                {
                    if (!decimal.TryParse(imgOpctyField.Value(), out imageOpacity))
                    {
                        imageOpacity = 75;
                    }
                }
            }
        
            imageOpacity = imageOpacity / 100;
            var sectionCls = "ph-section";
        	var btmPadding = Model.GetPadding("BottomPadding");
        	if(!string.IsNullOrWhiteSpace(btmPadding))
        	{
        		sectionCls += string.Format(" {0}", btmPadding);
        	}
        
        	var bgColor = Model.GetRenderingParameterLookup("Background Color");
        	if(!string.IsNullOrWhiteSpace(bgColor))
        	{
        		sectionCls += string.Format(" {0}", bgColor);
        	}
        	
        	
            var sectionStyle = "";
            if (!string.IsNullOrWhiteSpace(backgroundImageUrl))
            {
                sectionCls += " ph-bg-image";
                sectionStyle =
        string.Format(@"background: linear-gradient(0deg, rgba(0, 8, 28, {0}), rgba(0, 8, 28, {0})),
        url({1}) center / cover", imageOpacity, backgroundImageUrl);
            }
        
            <section class="@sectionCls" style="@sectionStyle">
                <div class="container">
                    <!-- Hero Content -->
                    <div class="ph-content">
                        <h1>@h1TextField.RenderValue()</h1>
                        
                        @if (heroTextField.HasValueToRender())
                        {
                            <p class="large">
                                @heroTextField.RenderValue()
                            </p>
                        }
                    </div>
                    @if (h3TextField.HasValueToRender())
                    {
                        <p>
                            @h3TextField.RenderValue()
                        </p>
                    }
                    <!-- Hero Authorship -->
                    <div class="ph-authorship">
        				@if (authoredByItem != null || reviewedByItem != null)
        				{
        					<div class="ph-authors">
        					@if (authoredByItem != null)
        					{
        						var iconField = Model.GetField("Icon", authoredByItem);
        						var nameField = Model.GetField("FullName", authoredByItem);
        						var roleField = Model.GetField("Role", authoredByItem);
        						if (nameField.HasValueToRender())
        						{
        							<div class="ph-author">
        								@if (iconField.HasValueToRender())
        								{
        									<img class="ph-author-image"
        										 src="@iconField.MediaURL"
        										 alt="@iconField.MediaAltText" />
        								}
        								<div class="ph-author-column">
        									<p class="small"><span>By </span>@nameField.Value()</p>
        									@if (roleField.HasValueToRender())
        									{
        										<p class="small">@roleField.RenderValue()</p>
        									}
        								</div>
        							</div>
        						}
        					}
        					@if (reviewedByItem != null)
        					{
        						var iconField = Model.GetField("Icon", reviewedByItem);
        						var nameField = Model.GetField("FullName", reviewedByItem);
        						var roleField = Model.GetField("Role", reviewedByItem);
        						if (nameField.HasValueToRender())
        						{
        							<div class="ph-author">
        								@if (iconField.HasValueToRender())
        								{
        									<img class="ph-author-image"
        										 src="@iconField.MediaURL"
        										 alt="@iconField.MediaAltText" />
        								}
        								<div class="ph-author-column">
        									<p class="small"><span>Reviewer </span>@nameField.Value()</p>
        									@if (roleField.HasValueToRender())
        									{
        										<p class="small">@roleField.RenderValue()</p>
        									}
        								</div>
        							</div>
        						}
        					}
        					</div>
        				}
        				
        
                        <div class="ph-author-column">
                            @if (timeToReadField.HasValueToRender())
                            {
                                <p class="small"><span class="bold">@timeToReadField.RenderValue() min</span> read</p>
                            }
                            @if (Sitecore.Context.PageMode.IsExperienceEditorEditing)
                            {
                                <p class="small">
                                    <span class="bold">Last updated </span>
                                    @customUpdatedDateField.RenderValue()
                                </p>
                            }
                            else
                            {
                                <p class="small">
                                    <span class="bold">Last updated </span>
                                    @updatedDate
                                </p>
                            }
                        </div>
                        <!-- Share Button -->
                        <div class="ph-author-column">
                            <a href="#" class="small bold share-btn">
                                <svg width="24"
                                     height="24"
                                     viewBox="0 0 20 20"
                                     fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd"
                                          clip-rule="evenodd"
                                          d="M12.12 7.88C12.5077 8.27003 12.5077 8.89996 12.12 9.29C11.73 9.67772 11.1 9.67772 10.71 9.29C9.51823 8.16109 7.65176 8.16109 6.46 9.29L3.64 12.12C2.53856 13.302 2.57106 15.144 3.71351 16.2865C4.85596 17.4289 6.69796 17.4614 7.88 16.36L9.29 15C9.47776 14.8107 9.73336 14.7042 10 14.7042C10.2666 14.7042 10.5222 14.8107 10.71 15C11.0977 15.39 11.0977 16.02 10.71 16.41L9.29 17.83C7.3281 19.7249 4.20957 19.6978 2.2809 17.7691C0.352235 15.8404 0.325136 12.7219 2.22 10.76L5.05 7.88C7.0025 5.92809 10.1675 5.92809 12.12 7.88ZM17.7191 2.2809C19.6478 4.20957 19.6749 7.3281 17.78 9.29L15 12.12C13.0475 14.0719 9.8825 14.0719 7.93 12.12C7.59022 11.7232 7.61307 11.1318 7.98243 10.7624C8.3518 10.3931 8.94324 10.3702 9.34 10.71C10.5318 11.8389 12.3982 11.8389 13.59 10.71L16.41 7.88C17.5114 6.69796 17.4789 4.85596 16.3365 3.71351C15.194 2.57106 13.352 2.53856 12.17 3.64L10.71 5.05C10.5222 5.23931 10.2666 5.3458 10 5.3458C9.73336 5.3458 9.47776 5.23931 9.29 5.05C8.90227 4.65996 8.90227 4.03003 9.29 3.64L10.71 2.22C12.6719 0.325136 15.7904 0.352235 17.7191 2.2809Z" />
                                </svg>
                                @Model.GetLookupValue(TheAA.Application.Constants.LabelIds.TheAA.Components.PageHeader.ShareArticle.ToString(), "Share Article")
                            </a>
                        </div>
                    </div>
                    <div class="ph-copymsg">
                        <p>Copied successfully</p>
                    </div>
                </div>
            </section>
        
            <script>
              document
                .querySelector(".share-btn")
                .addEventListener("click", function (e) {
                  e.preventDefault();
        
                  // Create an input element
                  var input = document.createElement("input");
                  input.style.position = "fixed";
                  input.style.opacity = 0;
                  input.value = window.location.href;
                  document.body.appendChild(input);
        
                  // Select the input element and copy the URL
                  input.select();
                  input.setSelectionRange(0, 99999);
        
                  //Copy the URL to Clipboard
                  document.execCommand("copy");
        
                  // Remove the input element
                  document.body.removeChild(input);
        
                  //Show the message
                  var message = document.querySelector(".ph-copymsg");
                  message.classList.add("show");
        
                  // Hide the message after 2 seconds
                  setTimeout(function () {
                    message.classList.remove("show");
                  }, 2000);
                });
            </script>
        
        }
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250522T004121Z
  - Version: 2
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20250506T110656Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "cce9ca08-f917-4093-8970-66da6d7cd737"
    - ID: "9e6a6532-99aa-4a0e-aba3-e7259e5429ba"
      Hint: StyleSheets
      Value: |
        .ph-section { 
          color: var(--color-mono-darkest);
        }
        
        .ph-bg-image {
          color: var(--color-white);
        }
        .ph-bg-image a {
          color: var(--color-white);
        }
        
        .ph-bg-dark {
          background-color: var(--color-mono-darkest);
          color: var(--color-white);
        }
        .ph-bg-dark a {
          color: var(--color-white);
        }
        
        .ph-section .container {
          display: flex;
          padding: var(--space-none) var(--space-large);
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-x-large);
          align-self: stretch;
        }
        
        .ph-content {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-large);
          align-self: stretch;
        }
        
        .ph-authorship {
          display: flex;
          align-items: center;
          align-content: center;
          gap: var(--space-large) var(--space-x-large);
          align-self: stretch;
          flex-wrap: wrap;
        }
        
        .ph-authors {
          display: flex;
          flex-direction: row;
          align-items: flex-start;
          gap: var(--space-x-large);
        }
        
        .ph-author {
          display: flex;
          align-items: center;
          gap: var(--space-medium);
        }
        
        .ph-author-column {
          display: flex;
          flex-direction: column;
          gap: var(--space-medium);
        }
        
        .ph-author-image {
          border-radius: 50%;
          height: 48px;
          width: 48px;
        }
        
        .ph-copymsg {
          text-align: center;
          display: none;
          position: fixed;
          top: var(--space-x-large);
          left: 50%;
          transform: translateX(-50%);
          background-color: var(--color-white);
          color: var(--color-black);
          padding: var(--space-medium);
          border-radius: 5px;
          z-index: 9999;
        }
        
        .ph-copymsg.show {
          display: block;
        }
        
        /***************************************/
        /********** Media Queries **************/
        /***************************************/
        @media (max-width: 480px) {
          section.ph-section {
            padding-top: var(--space-large) !important;
            padding-bottom: var(--space-large) !important;
          }
          .ph-content h1 {
            text-align: left;
          }
          .ph-container {
            padding: var(--space-large);
          }
          .ph-authorship {
            flex-direction: column;
            align-items: flex-start;
            align-self: flex-start;
          }
          .ph-authors {
            flex-direction: column;
          }
        }
    - ID: "acce9b46-1f19-4d3d-a0ec-ed01d807bb7d"
      Hint: RazorView
      Value: |
        @using TheAA.Foundation.Rendering;
        @using TheAA.Application.ViewModels;
        @using Sitecore.Data.Items;
        @inherits  HtmlTemplateBase<ContentViewRenderingModel>
        
        @functions {
            public string GetFormatedDate(string fieldName, string fallbackFieldName)
            {
                var field = Model.GetField(fieldName);
                if (!field.HasValueToRender())
                {
                    field = Model.GetField(fallbackFieldName);
                }
        
                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time");
                var newDate = TimeZoneInfo.ConvertTime(field.RenderDateTimeValue(), TimeZoneInfo.Utc, britishZone);
                return newDate.ToString("dd MMMM yyyy");
            }
        }
        
        @{
        
            var h1TextField = Model.GetField("H1TitleText");
            if (!h1TextField.HasValueToRender())
            {
                <!-- H1 is Empty -->
                return;
            }
        
            var heroTextField = Model.GetField("HeroTitleText");
            var h3TextField = Model.GetField("H3Text");
            var timeToReadField = Model.GetField("TimeToRead");
            var bgImageField = Model.GetField("BackgroundImage");
            var imgOpctyField = Model.GetField("ImageOpacityPercentage");
            var customUpdatedDateField = Model.GetField("CustomUpdatedDate");
            var authoredByField = Model.GetField("AuthoredBy");
            var reviewedByField = Model.GetField("ReviewedBy");
            Item authoredByItem = null;
            if (authoredByField.HasValueToRender())
            {
                authoredByItem = authoredByField.GetTarget();
            }
            Item reviewedByItem = null;
            if (reviewedByField.HasValueToRender())
            {
                reviewedByItem = reviewedByField.GetTarget();
            }
        
            var updatedDate = GetFormatedDate("CustomUpdatedDate", "__updated");
        
        
            var backgroundImageUrl = string.Empty;
            decimal imageOpacity = 75;
            if (bgImageField.HasValueToRender())
            {
                backgroundImageUrl = bgImageField.MediaURL;
        
                if (imgOpctyField.HasValueToRender())
                {
                    if (!decimal.TryParse(imgOpctyField.Value(), out imageOpacity))
                    {
                        imageOpacity = 75;
                    }
                }
            }
        
            imageOpacity = imageOpacity / 100;
            var sectionCls = "ph-section";
            var btmPadding = Model.GetPadding("BottomPadding");
            if (!string.IsNullOrWhiteSpace(btmPadding))
            {
                sectionCls += string.Format(" {0}", btmPadding);
            }
        
            var bgColor = Model.GetRenderingParameterLookup("Background Color");
            if (!string.IsNullOrWhiteSpace(bgColor))
            {
                sectionCls += string.Format(" {0}", bgColor);
            }
        
        
            var sectionStyle = "";
            if (!string.IsNullOrWhiteSpace(backgroundImageUrl))
            {
                sectionCls += " ph-bg-image";
                sectionStyle =
        string.Format(@"background: linear-gradient(0deg, rgba(0, 8, 28, {0}), rgba(0, 8, 28, {0})),
        url({1}) center / cover", imageOpacity, backgroundImageUrl);
            }
        
            <section class="@sectionCls" style="@sectionStyle">
                <div class="container">
                    <!-- Hero Content -->
                    <div class="ph-content">
                        <h1>@h1TextField.RenderValue()</h1>
        
                        @if (heroTextField.HasValueToRender())
                        {
                            <p class="large">
                                @heroTextField.RenderValue()
                            </p>
                        }
                    </div>
                    @if (h3TextField.HasValueToRender())
                    {
                        <p>
                            @h3TextField.RenderValue()
                        </p>
                    }
                    <!-- Hero Authorship -->
                    <div class="ph-authorship">
                        @if (authoredByItem != null || reviewedByItem != null)
                        {
                            <div class="ph-authors">
                                @if (authoredByItem != null)
                                {
                                    var iconField = Model.GetField("Icon", authoredByItem);
                                    var nameField = Model.GetField("FullName", authoredByItem);
                                    var roleField = Model.GetField("Role", authoredByItem);
                                    if (nameField.HasValueToRender())
                                    {
                                        <div class="ph-author">
                                            @if (iconField.HasValueToRender())
                                            {
                                                <img class="ph-author-image"
                                                     src="@iconField.MediaURL"
                                                     alt="@iconField.MediaAltText" />
                                            }
                                            <div class="ph-author-column">
                                                <p class="small"><span>By </span>@nameField.Value()</p>
                                                @if (roleField.HasValueToRender())
                                                {
                                                    <p class="small">@roleField.RenderValue()</p>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                                @if (reviewedByItem != null)
                                {
                                    var iconField = Model.GetField("Icon", reviewedByItem);
                                    var nameField = Model.GetField("FullName", reviewedByItem);
                                    var roleField = Model.GetField("Role", reviewedByItem);
                                    if (nameField.HasValueToRender())
                                    {
                                        <div class="ph-author">
                                            @if (iconField.HasValueToRender())
                                            {
                                                <img class="ph-author-image"
                                                     src="@iconField.MediaURL"
                                                     alt="@iconField.MediaAltText" />
                                            }
                                            <div class="ph-author-column">
                                                <p class="small"><span>Reviewer </span>@nameField.Value()</p>
                                                @if (roleField.HasValueToRender())
                                                {
                                                    <p class="small">@roleField.RenderValue()</p>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
        
        
                        <div class="ph-author-column">
                            @if (timeToReadField.HasValueToRender())
                            {
                                <p class="small"><span class="bold">@timeToReadField.RenderValue() min</span> read</p>
                            }
                            @if (Sitecore.Context.PageMode.IsExperienceEditorEditing)
                            {
                                <p class="small">
                                    <span class="bold">Last updated </span>
                                    @customUpdatedDateField.RenderValue()
                                </p>
                            }
                            else
                            {
                                <p class="small">
                                    <span class="bold">Last updated </span>
                                    @updatedDate
                                </p>
                            }
                        </div>
                        <!-- Share Button -->
                        <div class="ph-author-column">
                            <a href="#" class="small bold share-btn">
                                <svg width="24"
                                     height="24"
                                     viewBox="0 0 20 20"
                                     fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd"
                                          clip-rule="evenodd"
                                          d="M12.12 7.88C12.5077 8.27003 12.5077 8.89996 12.12 9.29C11.73 9.67772 11.1 9.67772 10.71 9.29C9.51823 8.16109 7.65176 8.16109 6.46 9.29L3.64 12.12C2.53856 13.302 2.57106 15.144 3.71351 16.2865C4.85596 17.4289 6.69796 17.4614 7.88 16.36L9.29 15C9.47776 14.8107 9.73336 14.7042 10 14.7042C10.2666 14.7042 10.5222 14.8107 10.71 15C11.0977 15.39 11.0977 16.02 10.71 16.41L9.29 17.83C7.3281 19.7249 4.20957 19.6978 2.2809 17.7691C0.352235 15.8404 0.325136 12.7219 2.22 10.76L5.05 7.88C7.0025 5.92809 10.1675 5.92809 12.12 7.88ZM17.7191 2.2809C19.6478 4.20957 19.6749 7.3281 17.78 9.29L15 12.12C13.0475 14.0719 9.8825 14.0719 7.93 12.12C7.59022 11.7232 7.61307 11.1318 7.98243 10.7624C8.3518 10.3931 8.94324 10.3702 9.34 10.71C10.5318 11.8389 12.3982 11.8389 13.59 10.71L16.41 7.88C17.5114 6.69796 17.4789 4.85596 16.3365 3.71351C15.194 2.57106 13.352 2.53856 12.17 3.64L10.71 5.05C10.5222 5.23931 10.2666 5.3458 10 5.3458C9.73336 5.3458 9.47776 5.23931 9.29 5.05C8.90227 4.65996 8.90227 4.03003 9.29 3.64L10.71 2.22C12.6719 0.325136 15.7904 0.352235 17.7191 2.2809Z" />
                                </svg>
                                @Model.GetLookupValue(TheAA.Application.Constants.LabelIds.TheAA.Components.PageHeader.ShareArticle.ToString(), "Share Article")
                            </a>
                        </div>
                    </div>
                    <div class="ph-copymsg">
                        <p>Copied successfully</p>
                    </div>
                </div>
            </section>
        
            <script>
                document
                    .querySelector(".share-btn")
                    .addEventListener("click", function (e) {
                        e.preventDefault();
        
                        // Create an input element
                        var input = document.createElement("input");
                        input.style.position = "fixed";
                        input.style.opacity = 0;
                        input.value = window.location.href;
                        document.body.appendChild(input);
        
                        // Select the input element and copy the URL
                        input.select();
                        input.setSelectionRange(0, 99999);
        
                        //Copy the URL to Clipboard
                        document.execCommand("copy");
        
                        // Remove the input element
                        document.body.removeChild(input);
        
                        //Show the message
                        var message = document.querySelector(".ph-copymsg");
                        message.classList.add("show");
        
                        // Hide the message after 2 seconds
                        setTimeout(function () {
                            message.classList.remove("show");
                        }, 2000);
                    });
            </script>
        
        }
    - ID: "c8f93afe-bfd4-4e8f-9c61-152559854661"
      Hint: __Valid from
      Value: 20250506T110656Z
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20250522T004121Z
